import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from typing import Dict

class WarDataVisualizer:
    """
    Visualization script for processed Inter-State War data
    Creates comprehensive plots from CSV files generated by the dataloader
    """
    
    def __init__(self, data_dir: str = None, output_dir: str = None):
        """Initialize visualizer with data and output directories"""
        if data_dir is None:
            # Default to military data folder
            current_dir = os.path.dirname(os.path.abspath(__file__))
            data_dir = os.path.join(current_dir, '..', 'data', 'military')
        
        if output_dir is None:
            # Default to plots folder
            current_dir = os.path.dirname(os.path.abspath(__file__))
            output_dir = os.path.join(current_dir, '..', 'plots')
        
        self.data_dir = data_dir
        self.output_dir = output_dir
        
        # Ensure output directory exists
        os.makedirs(self.output_dir, exist_ok=True)
        
        # Color mapping for countries
        self.country_colors = {
            'United States of America': '#1f77b4',  # Blue
            'United Kingdom': '#ff7f0e',           # Orange
            'China': '#2ca02c'                     # Green
        }
        
        # Load data
        self.data = {}
        self.load_processed_data()
    
    def load_processed_data(self):
        """Load all processed CSV files"""
        files_to_load = {
            'war_summary': 'war_summary.csv',
            'country_stats': 'country_participation.csv',
            'timeline_data': 'timeline_data.csv',
            'outcome_data': 'outcome_data.csv'
        }
        
        for key, filename in files_to_load.items():
            file_path = os.path.join(self.data_dir, filename)
            try:
                self.data[key] = pd.read_csv(file_path)
                print(f"Loaded {key}: {len(self.data[key])} records")
            except FileNotFoundError:
                print(f"Warning: {filename} not found. Run dataloader first.")
                self.data[key] = pd.DataFrame()
    
    def create_comprehensive_visualizations(self):
        """Create all visualizations and save to plots folder"""
        
        # Set up the plotting style
        plt.style.use('default')
        sns.set_palette("husl")
        
        fig = plt.figure(figsize=(20, 16))
        gs = fig.add_gridspec(3, 2, hspace=0.3, wspace=0.3)
        
        fig.suptitle('Inter-State Wars: UK, US, and China Analysis (1846-2003)', 
                     fontsize=18, fontweight='bold', y=0.95)
        
        # 1. Timeline with Military Strength Indicators (Top - Full Width)
        self._create_timeline_plot(fig.add_subplot(gs[0, :]))
        
        # 2. War Duration vs Casualties
        self._create_duration_casualties_plot(fig.add_subplot(gs[1, 0]))
        
        # 3. Country Participation
        self._create_participation_plot(fig.add_subplot(gs[1, 1]))
        
        # 4. Historical Period Analysis
        self._create_period_analysis_plot(fig.add_subplot(gs[2, 0]))
        
        # 5. Win/Loss Record
        self._create_outcome_plot(fig.add_subplot(gs[2, 1]))
        
        plt.tight_layout()
        
        # Save the comprehensive plot
        output_path = os.path.join(self.output_dir, 'inter_state_wars_comprehensive_analysis.png')
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        print(f"Comprehensive visualization saved: {output_path}")
        
        plt.show()
        return output_path
    
    def _create_timeline_plot(self, ax):
        """Create timeline visualization with strength indicators"""
        timeline_data = self.data['timeline_data']
        
        if timeline_data.empty:
            ax.text(0.5, 0.5, 'No timeline data available', ha='center', va='center', transform=ax.transAxes)
            return
        
        countries = ['United States of America', 'United Kingdom', 'China']
        y_positions = {'United States of America': 3, 'United Kingdom': 2, 'China': 1}
        
        for country in countries:
            country_timeline = timeline_data[timeline_data['Country'] == country]
            if len(country_timeline) > 0:
                color = self.country_colors.get(country, '#666666')
                
                # Plot dots for each war, size based on strength score
                scatter = ax.scatter(
                    country_timeline['Year'], 
                    [y_positions[country]] * len(country_timeline),
                    s=country_timeline['StrengthScore'] * 3,  # Size based on strength
                    c=country_timeline['BattleDeaths'],
                    cmap='Reds',
                    alpha=0.7,
                    edgecolors=color,
                    linewidth=2,
                    label=country
                )
        
        ax.set_xlabel('Year', fontsize=12)
        ax.set_ylabel('Country', fontsize=12)
        ax.set_title('Military Engagement Timeline\n(Dot size = Relative strength, Color intensity = Battle deaths)', 
                     fontsize=14, pad=20)
        ax.set_yticks([1, 2, 3])
        ax.set_yticklabels(['China', 'United Kingdom', 'United States'])
        ax.grid(True, alpha=0.3, axis='x')
        ax.legend(loc='upper left')
        
        # Add colorbar for battle deaths
        if 'scatter' in locals():
            cbar = plt.colorbar(scatter, ax=ax, orientation='horizontal', pad=0.1, shrink=0.6)
            cbar.set_label('Battle Deaths')
    
    def _create_duration_casualties_plot(self, ax):
        """Create war duration vs casualties plot"""
        war_summary = self.data['war_summary']
        
        if war_summary.empty:
            ax.text(0.5, 0.5, 'No war summary data available', ha='center', va='center', transform=ax.transAxes)
            return
        
        valid_wars = war_summary[war_summary['Duration'] > 0].copy()
        
        if valid_wars.empty:
            ax.text(0.5, 0.5, 'No valid duration data available', ha='center', va='center', transform=ax.transAxes)
            return
        
        # Normalize duration for better visualization
        duration_sizes = (valid_wars['Duration'] / valid_wars['Duration'].max()) * 200 + 50
        
        scatter = ax.scatter(
            valid_wars['Duration'], 
            valid_wars['TotalDeaths'], 
            s=duration_sizes,
            alpha=0.7, 
            c=valid_wars['StartYear'], 
            cmap='viridis', 
            edgecolors='black', 
            linewidth=0.5
        )
        
        ax.set_xlabel('War Duration (Years)')
        ax.set_ylabel('Total Battle Deaths')
        ax.set_title('War Duration vs Casualties\n(Bubble size normalized by max duration)')
        ax.set_yscale('log')
        ax.set_xlim(0, valid_wars['Duration'].max() * 1.1)
        ax.grid(True, alpha=0.3)
        
        # Annotate major wars
        major_wars = valid_wars.nlargest(3, 'TotalDeaths')
        for _, war in major_wars.iterrows():
            ax.annotate(war['WarName'], 
                       (war['Duration'], war['TotalDeaths']),
                       xytext=(10, 10), textcoords='offset points',
                       fontsize=9, ha='left',
                       bbox=dict(boxstyle='round,pad=0.3', fc='yellow', alpha=0.7))
        
        cbar = plt.colorbar(scatter, ax=ax)
        cbar.set_label('Start Year')
    
    def _create_participation_plot(self, ax):
        """Create country participation plot"""
        country_stats = self.data['country_stats']
        
        if country_stats.empty:
            ax.text(0.5, 0.5, 'No country stats available', ha='center', va='center', transform=ax.transAxes)
            return
        
        countries = country_stats['StateName'].tolist()
        wars_participated = country_stats['WarsParticipated'].tolist()
        total_deaths = country_stats['TotalBattleDeaths'].tolist()
        
        # Use different colors for each country
        colors = [self.country_colors.get(country, '#666666') for country in countries]
        
        bars = ax.bar(range(len(countries)), wars_participated, color=colors, alpha=0.8, edgecolor='black')
        
        # Add death toll labels with better formatting
        for i, (bar, deaths) in enumerate(zip(bars, total_deaths)):
            height = bar.get_height()
            death_label = f'{deaths/1000:.0f}K' if deaths < 1000000 else f'{deaths/1000000:.1f}M'
            ax.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                   f'{death_label}\ndeaths', ha='center', va='bottom', fontsize=10, fontweight='bold')
        
        ax.set_xlabel('Country')
        ax.set_ylabel('Number of Wars Participated')
        ax.set_title('Wars Participated by Country\n(Labels show total battle deaths)')
        ax.set_xticks(range(len(countries)))
        ax.set_xticklabels([c.replace(' of America', '') for c in countries], rotation=15)
        ax.grid(True, alpha=0.3, axis='y')
    
    def _create_period_analysis_plot(self, ax):
        """Create historical period analysis plot"""
        war_summary = self.data['war_summary']
        
        if war_summary.empty:
            ax.text(0.5, 0.5, 'No war summary data available', ha='center', va='center', transform=ax.transAxes)
            return
        
        def categorize_period(year):
            if year < 1900:
                return '19th Century\n(1846-1899)'
            elif year < 1945:
                return 'World Wars Era\n(1900-1944)'
            elif year < 1990:
                return 'Cold War Era\n(1945-1989)'
            else:
                return 'Modern Era\n(1990-2003)'
        
        war_summary['Period'] = war_summary['StartYear'].apply(categorize_period)
        period_stats = war_summary.groupby('Period').agg({
            'WarNum': 'count',
            'TotalDeaths': 'sum'
        }).reset_index()
        
        periods = period_stats['Period'].tolist()
        deaths = period_stats['TotalDeaths'].tolist()
        
        bars = ax.bar(periods, deaths, color=['#8B4513', '#FF6347', '#4169E1', '#32CD32'], 
                     alpha=0.8, edgecolor='black')
        
        ax.set_xlabel('Historical Period')
        ax.set_ylabel('Total Battle Deaths')
        ax.set_title('Total Casualties by Historical Period')
        ax.tick_params(axis='x', rotation=15)
        ax.set_yscale('log')
        
        # Add value labels on bars
        for bar, death_count in zip(bars, deaths):
            height = bar.get_height()
            death_label = f'{death_count/1000000:.1f}M' if death_count >= 1000000 else f'{death_count/1000:.0f}K'
            ax.text(bar.get_x() + bar.get_width()/2., height * 1.1,
                   death_label, ha='center', va='bottom', fontweight='bold', fontsize=11)
    
    def _create_outcome_plot(self, ax):
        """Create war outcomes plot"""
        outcome_data = self.data['outcome_data']
        
        if outcome_data.empty:
            ax.text(0.5, 0.5, 'No outcome data available', ha='center', va='center', transform=ax.transAxes)
            return
        
        # Set StateName as index for plotting
        if 'StateName' in outcome_data.columns:
            outcome_data = outcome_data.set_index('StateName')
        
        available_outcomes = [col for col in outcome_data.columns if isinstance(col, int)]
        outcome_labels = {1: 'Wins', 2: 'Losses', 3: 'Compromise', 4: 'Unclear'}
        
        # Create stacked bar chart
        bottom = np.zeros(len(outcome_data))
        colors_outcomes = ['#2E8B57', '#DC143C', '#FFD700', '#708090']  # Green, Red, Gold, Gray
        
        for i, outcome in enumerate(available_outcomes):
            if outcome in outcome_labels and outcome in outcome_data.columns:
                ax.bar(outcome_data.index, outcome_data[outcome], bottom=bottom,
                      label=outcome_labels[outcome], color=colors_outcomes[i % len(colors_outcomes)],
                      alpha=0.8, edgecolor='black')
                bottom += outcome_data[outcome]
        
        ax.set_xlabel('Country')
        ax.set_ylabel('Number of Wars')
        ax.set_title('War Outcomes by Country')
        
        # Fix x-axis labels
        labels = [name.replace(' of America', '') for name in outcome_data.index]
        ax.set_xticks(range(len(labels)))
        ax.set_xticklabels(labels, rotation=15)
        ax.legend(loc='upper right')
        ax.grid(True, alpha=0.3, axis='y')

if __name__ == "__main__":
    # Create visualizations from processed data
    visualizer = WarDataVisualizer()
    
    print("=== WAR DATA VISUALIZATION ===")
    print("Loading processed data and creating comprehensive visualizations...")
    
    # Create comprehensive visualization
    output_path = visualizer.create_comprehensive_visualizations()
    
    print(f"\nVisualization complete!")
    print(f"Saved to: {output_path}")
    print("\nNote: If plots appear empty, run the dataloader first to process the raw data.")